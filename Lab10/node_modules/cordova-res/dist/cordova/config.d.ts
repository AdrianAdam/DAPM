/// <reference types="node" />
import et from 'elementtree';
import { GeneratedResource, Platform } from '../platform';
import { ResolvedColorSource, ResolvedSource, ResourceNodeAttribute } from '../resources';
export declare function getConfigPath(directory: string): string;
export declare function run(resourcesDirectory: string, doc: et.ElementTree, sources: readonly ResolvedSource[], resources: readonly GeneratedResource[], errstream: NodeJS.WritableStream | null): Promise<void>;
export declare function resolveColorsDocument(colorsPath: string): Promise<et.ElementTree>;
export declare function runColorsConfig(colorsPath: string, colors: readonly ResolvedColorSource[]): Promise<void>;
export declare function runConfig(doc: et.ElementTree, resources: readonly GeneratedResource[], errstream: NodeJS.WritableStream | null): void;
export declare function runResource(container: et.Element, resource: GeneratedResource): void;
export declare function resolvePlatformElement(container: et.Element, platform: Platform): et.Element;
/**
 * Query a container for a subelement and create it if it doesn't exist
 */
export declare function resolveElement(container: et.Element, nodeName: string, xpaths: string[]): et.Element;
export declare function conformPath(value: string | number): string;
export declare function resolveAttributeValue(attr: ResourceNodeAttribute, value: string | number): string;
export declare function resolveAttribute(resource: GeneratedResource, attr: ResourceNodeAttribute): string | undefined;
export declare function groupImages(images: readonly GeneratedResource[]): Map<Platform, GeneratedResource[]>;
export declare function read(path: string): Promise<et.ElementTree>;
export declare function write(path: string, doc: et.ElementTree): Promise<void>;
export declare function getPlatforms(container: et.Element): string[];
export declare function getPreference(container: et.Element, name: string): string | undefined;
