/// <reference types="node" />
import { Metadata, Sharp } from 'sharp';
import { Platform } from './platform';
export declare const enum ResourceType {
    ADAPTIVE_ICON = "adaptive-icon",
    ICON = "icon",
    SPLASH = "splash"
}
export declare const RESOURCE_TYPES: readonly ResourceType[];
export declare const enum SourceType {
    RASTER = "raster",
    COLOR = "color"
}
/**
 * @see https://cordova.apache.org/docs/en/latest/config_ref/images.html#windows
 */
export declare const enum Target {
    STORE_LOGO = "StoreLogo",
    SQUARE_30_X_30_LOGO = "Square30x30Logo",
    SQUARE_44_X_44_LOGO = "Square44x44Logo",
    SQUARE_70_X_70_LOGO = "Square70x70Logo",
    SQUARE_71_X_71_LOGO = "Square71x71Logo",
    SQUARE_150_X_150_LOGO = "Square150x150Logo",
    SQUARE_310_X_310_LOGO = "Square310x310Logo",
    WIDE_310_X_150_LOGO = "Wide310x150Logo",
    SPLASH_SCREEN = "SplashScreen"
}
export interface ImageSource {
    type: SourceType.RASTER;
    /**
     * Path to source image.
     */
    src: string;
}
export interface ColorSource {
    type: SourceType.COLOR;
    /**
     * Hex value.
     */
    color: string;
}
export declare type Source = ImageSource | ColorSource;
export interface ImageSourceData {
    src: string;
    pipeline: Sharp;
    metadata: Metadata;
}
export interface ResolvedImageSource extends ImageSource {
    platform: Platform;
    resource: ResourceType;
    image: ImageSourceData;
}
export interface ResolvedColorSource extends ColorSource {
    platform: Platform;
    resource: ResourceType;
    name: string;
}
export declare type ResolvedSource = ResolvedImageSource | ResolvedColorSource;
export declare const RESOURCE_FORMATS: readonly Format[];
export declare const RESOURCE_RASTER_FORMATS: readonly Format[];
export declare function isResourceFormat(format: any): format is Format;
export declare function isRasterResourceFormat(format: any): format is Format;
export interface RasterResourceSchema {
    width: number;
    height: number;
}
export declare function validateRasterResource(platform: Platform, type: ResourceType, source: string, metadata: Metadata, schema: RasterResourceSchema): Promise<void>;
export declare const COLOR_REGEX: RegExp;
export declare function getRasterResourceSchema(platform: Platform, type: ResourceType): RasterResourceSchema;
export declare function validateResource(platform: Platform, type: ResourceType, source: string, pipeline: Sharp, errstream: NodeJS.WritableStream | null): Promise<Metadata>;
export declare const enum Format {
    NONE = "none",
    PNG = "png",
    JPEG = "jpeg"
}
export declare const enum Orientation {
    LANDSCAPE = "landscape",
    PORTRAIT = "portrait"
}
export declare const enum Density {
    LDPI = "ldpi",
    MDPI = "mdpi",
    HDPI = "hdpi",
    XHDPI = "xhdpi",
    XXHDPI = "xxhdpi",
    XXXHDPI = "xxxhdpi",
    LAND_LDPI = "land-ldpi",
    LAND_MDPI = "land-mdpi",
    LAND_HDPI = "land-hdpi",
    LAND_XHDPI = "land-xhdpi",
    LAND_XXHDPI = "land-xxhdpi",
    LAND_XXXHDPI = "land-xxxhdpi",
    PORT_LDPI = "port-ldpi",
    PORT_MDPI = "port-mdpi",
    PORT_HDPI = "port-hdpi",
    PORT_XHDPI = "port-xhdpi",
    PORT_XXHDPI = "port-xxhdpi",
    PORT_XXXHDPI = "port-xxxhdpi"
}
export declare const enum ResourceKey {
    SRC = "src",
    FOREGROUND = "foreground",
    BACKGROUND = "background",
    FORMAT = "format",
    WIDTH = "width",
    HEIGHT = "height",
    DENSITY = "density",
    ORIENTATION = "orientation",
    TARGET = "target"
}
export interface ResourceKeyValues {
    readonly [ResourceKey.SRC]?: string;
    readonly [ResourceKey.FOREGROUND]?: string;
    readonly [ResourceKey.BACKGROUND]?: string;
    readonly [ResourceKey.FORMAT]?: Format;
    readonly [ResourceKey.WIDTH]?: number;
    readonly [ResourceKey.HEIGHT]?: number;
    readonly [ResourceKey.DENSITY]?: Density;
    readonly [ResourceKey.ORIENTATION]?: Orientation;
    readonly [ResourceKey.TARGET]?: string;
}
export declare type ImageResourceConfig = Required<Pick<ResourceKeyValues, ResourceKey.FORMAT | ResourceKey.WIDTH | ResourceKey.HEIGHT>>;
export declare type AndroidAdaptiveIconConfig = ImageResourceConfig & Required<Pick<ResourceKeyValues, ResourceKey.FOREGROUND | ResourceKey.BACKGROUND | ResourceKey.DENSITY>>;
export declare type AndroidIconConfig = ImageResourceConfig & Required<Pick<ResourceKeyValues, ResourceKey.SRC | ResourceKey.DENSITY>>;
export declare type AndroidSplashConfig = ImageResourceConfig & Required<Pick<ResourceKeyValues, ResourceKey.SRC | ResourceKey.FORMAT | ResourceKey.WIDTH | ResourceKey.HEIGHT | ResourceKey.DENSITY | ResourceKey.ORIENTATION>>;
export declare type IOSIconConfig = ImageResourceConfig & Required<Pick<ResourceKeyValues, ResourceKey.SRC>>;
export declare type IOSSplashConfig = ImageResourceConfig & Required<Pick<ResourceKeyValues, ResourceKey.SRC | ResourceKey.ORIENTATION>>;
export declare type WindowsIconConfig = Required<Pick<ResourceKeyValues, ResourceKey.SRC | ResourceKey.FORMAT | ResourceKey.WIDTH | ResourceKey.HEIGHT>> & Pick<ResourceKeyValues, ResourceKey.TARGET>;
export declare type WindowsSplashConfig = Required<Pick<ResourceKeyValues, ResourceKey.SRC | ResourceKey.FORMAT | ResourceKey.WIDTH | ResourceKey.HEIGHT | ResourceKey.ORIENTATION>> & Pick<ResourceKeyValues, ResourceKey.TARGET>;
export declare const enum ResourceNodeAttributeType {
    PATH = "path"
}
export interface ResourceNodeAttribute {
    readonly key: ResourceKey;
    readonly type?: ResourceNodeAttributeType;
}
/**
 * Metadata for Cordova's config.xml
 */
export interface ResourcesTypeConfigXml {
    /**
     * XML node name of this resource (e.g. 'icon', 'splash')
     */
    readonly nodeName: string;
    /**
     * An array of resource keys to copy into the XML node as attributes
     */
    readonly nodeAttributes: readonly ResourceNodeAttribute[];
    /**
     * Get the XPath expression(s) for a resource
     *
     * This function is used to look up existing nodes in the XML. This is
     * important because nodes need to be replaced if found.
     */
    readonly xpaths: (resource: ResourceKeyValues) => string[];
    /**
     * Get whether a resource should be included in the XML or not
     */
    readonly included: (resource: ResourceKeyValues) => boolean;
}
export interface ResourcesTypeConfig<C extends ResourceKeyValues> {
    readonly resources: readonly C[];
    readonly configXml: ResourcesTypeConfigXml;
}
export declare function validateResourceTypes(types: readonly string[]): ResourceType[];
export declare function isSupportedResourceType(type: any): type is ResourceType;
export declare function getResourcesConfig(platform: Platform.ANDROID, type: ResourceType.ADAPTIVE_ICON): ResourcesTypeConfig<AndroidAdaptiveIconConfig>;
export declare function getResourcesConfig(platform: Platform.ANDROID | Platform.IOS | Platform.WINDOWS, type: ResourceType.ICON | ResourceType.SPLASH): ResourcesTypeConfig<AndroidIconConfig | AndroidSplashConfig | IOSIconConfig | IOSSplashConfig | WindowsIconConfig | WindowsSplashConfig>;
export declare function xpathsForPathAttribute(nodeName: string, attr: ResourceKey): (resource: ResourceKeyValues) => string[];
export declare function generateScaledWindowsResourceSrc(src: string, factor: number): string;
export declare function generateScaledWindowsResource<T extends WindowsIconConfig | WindowsSplashConfig>(resource: T, factor: number): T;
export declare function generateScaledWindowsResources<T extends WindowsIconConfig | WindowsSplashConfig>(resource: T, factors: readonly number[]): T[];
